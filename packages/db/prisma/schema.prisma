// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Freelancer {
  id    String @id @default(cuid())
  name  String
  posts Post[]
}

model Post {
  id           String        @id @default(cuid())
  title        String
  description  String
  freelancerId String
  tags         PostTag[]
  freelancer   Freelancer    @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
  messagePosts MessagePost[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model PostTag {
  id            String      @id @default(cuid())
  postId        String
  subcategoryId String
  post          Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
}

model Category {
  id            String        @id @default(cuid())
  name          String
  subcategories Subcategory[]
}

model Subcategory {
  id         String    @id @default(cuid())
  name       String
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  PostTag    PostTag[]
}

model ChatSession {
  id        String    @id @default(uuid())
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
}

model Message {
  id            String        @id @default(uuid())
  chatSessionId String
  role          Role
  content       String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  status        Status        @default(SENT)
  errorCode     String?
  ChatSession   ChatSession   @relation(fields: [chatSessionId], references: [id])
  messagePosts  MessagePost[]
}

model MessagePost {
  id        String   @id @default(uuid())
  messageId String
  postId    String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([messageId, postId])
}

enum Role {
  USER
  BOT
}

enum Status {
  SENT
  DELIVERED
  READ
  FAILED
}
